Skip to content
Wadim84
/
my_repository

Type / to search

Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
Commit
ДЗ 26.08.2023.md
 main
@Wadim84
Wadim84 committed 5 hours ago 
1 parent d01def8
commit a7f7384
Showing 1 changed file with 120 additions and 0 deletions.
 120 changes: 120 additions & 0 deletions120  
ДЗ 26.08.2023.md
@@ -0,0 +1,120 @@
Описать пример(в словесной или (и) в форме кода)  применения модификаторов доступа класса (public, private, protected)
Ппример из урока:
class Human:
    def __init__(self):
        self.name = "NAME" # public
        self._age = 0 # protected
        self.__gender = "GENDER" # private
публичное свойство (public);
режим доступа protected (служит для обращения внутри класса и во всех его дочерних классах)
режим доступа private (служит для обращения только внутри класса).

вне класса атрибут age использовать нельзя. к данному атрибутам лучше не обращаться напрямую.
к атрибуту gender не можем напрямую к ним обращаться (в противном случае будет ошибка), а вот внутри класса доступ к нему открыт


Дополнительное задание

Создать класс Enemy (здоровье=50 и наносимый урон) с методом атаковать(уменьшает 10 HP)
Создать класс Player (здоровье=100, инвентарь) для инвентаря реализовать геттер и сеттер),  с методоми защищаться(Блокирует 5Hp) и атаковать (уменьшает 10 HP)
Создать класс weapon (урон) и нанести урон
Создать потомка knife  и метод ближняя атака атака
Создать потомка Pistol  и метод дальняя атака
Создать потомка  pistol_bayonet наследовать от knife и Pistol (умеет переключать режимы ближнего и дальнего боя)
Реализовать  игру по ходам:
 первый ходит враг 
 игроку предлагается выбор защищаться или атаковать
*случайным образом раз в 5 ходов в инвентарь к игроку попадает оружие, оружия повторяться не могут

КОД

import random
class Enemy:
    def init(self):
        self.health = 50
        self.damage = 10
    def attack(self, player):
        player.take_damage(self.damage)
class Player:
    def init(self):
        self.health = 100
        self.inventory = []
        self.weapon = None
    def defend(self):
        self.health += 5
    def attack(self, enemy):
        if self.weapon is not None:
            enemy.take_damage(self.weapon.damage)
        else:
            enemy.take_damage(10)
    def take_damage(self, damage):
        self.health -= damage
    def get_inventory(self):
        return self.inventory
    def set_inventory(self, item):
        self.inventory.append(item)
class Weapon:
    def init(self, damage):
        self.damage = damage
    def inflict_damage(self):
        return self.damage
class Knife(Weapon):
    def init(self):
        super().init(damage=15)
    def melee_attack(self, enemy):
        enemy.take_damage(self.damage)
class Pistol(Weapon):
    def init(self):
        super().init(damage=20)
    def ranged_attack(self, enemy):
        enemy.take_damage(self.damage)
class PistolBayonet(Knife, Pistol):
    def init(self):
        super().init()
        self.mode = "melee"  # режим ближнего боя или дальнего боя
    def switch_mode(self):
        if self.mode == "melee":
            self.mode = "ranged"
        else:
            self.mode = "melee"
    def attack(self, enemy):
        if self.mode == "melee":
            self.melee_attack(enemy)
        else:
            self.ranged_attack(enemy)
def game():
    enemy = Enemy()
    player = Player()
    turns = 0
    while enemy.health > 0 and player.health > 0:
        # Ход врага
        enemy.attack(player)
        print("Здоровье игрока:", player.health)
        # Ход игрока
        print("Выберите действие: (1) Защититься, (2) Атаковать")
        choice = int(input())
        if choice == 1:
            player.defend()
        elif choice == 2:
            player.attack(enemy)
        else:
            print("Некорректный выбор.")
            continue
        print("Здоровье врага:", enemy.health)
        # Раз в 5 ходов оружие попадает в инвентарь игрока
        turns += 1
        if turns % 5 == 0:
            if len(player.get_inventory()) < 5:  # Игрок может хранить только 5 предметов в инвентаре
                weapon_type = random.choice(["Knife", "Pistol", "PistolBayonet"])
                if weapon_type == "Knife":
                    player.set_inventory(Knife())
                elif weapon_type == "Pistol":
                    player.set_inventory(Pistol())
                elif weapon_type == "PistolBayonet":
                    player.set_inventory(PistolBayonet())
                print("Вам выпало оружие:", weapon_type)
    if player.health <= 0:
        print("Вы проиграли!")
    elif enemy.health <= 0:
        print("Вы победили!")
game()
0 comments on commit a7f7384
@Wadim84
 
Leave a comment
Не выбран ни один файл
Attach files by dragging & dropping, selecting or pasting them.
 You’re receiving notifications because you’re watching this repository.
Footer
© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
ДЗ 26.08.2023.md · Wadim84/my_repository@a7f7384
